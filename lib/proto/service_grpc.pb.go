// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortDbClient is the client API for PortDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortDbClient interface {
	PutPort(ctx context.Context, in *PortData, opts ...grpc.CallOption) (*PutPortRes, error)
	GetPorts(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (PortDb_GetPortsClient, error)
}

type portDbClient struct {
	cc grpc.ClientConnInterface
}

func NewPortDbClient(cc grpc.ClientConnInterface) PortDbClient {
	return &portDbClient{cc}
}

func (c *portDbClient) PutPort(ctx context.Context, in *PortData, opts ...grpc.CallOption) (*PutPortRes, error) {
	out := new(PutPortRes)
	err := c.cc.Invoke(ctx, "/PortDb/PutPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portDbClient) GetPorts(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (PortDb_GetPortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortDb_ServiceDesc.Streams[0], "/PortDb/GetPorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portDbGetPortsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortDb_GetPortsClient interface {
	Recv() (*PortData, error)
	grpc.ClientStream
}

type portDbGetPortsClient struct {
	grpc.ClientStream
}

func (x *portDbGetPortsClient) Recv() (*PortData, error) {
	m := new(PortData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortDbServer is the server API for PortDb service.
// All implementations must embed UnimplementedPortDbServer
// for forward compatibility
type PortDbServer interface {
	PutPort(context.Context, *PortData) (*PutPortRes, error)
	GetPorts(*GetRequest, PortDb_GetPortsServer) error
	mustEmbedUnimplementedPortDbServer()
}

// UnimplementedPortDbServer must be embedded to have forward compatible implementations.
type UnimplementedPortDbServer struct {
}

func (UnimplementedPortDbServer) PutPort(context.Context, *PortData) (*PutPortRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPort not implemented")
}
func (UnimplementedPortDbServer) GetPorts(*GetRequest, PortDb_GetPortsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPorts not implemented")
}
func (UnimplementedPortDbServer) mustEmbedUnimplementedPortDbServer() {}

// UnsafePortDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortDbServer will
// result in compilation errors.
type UnsafePortDbServer interface {
	mustEmbedUnimplementedPortDbServer()
}

func RegisterPortDbServer(s grpc.ServiceRegistrar, srv PortDbServer) {
	s.RegisterService(&PortDb_ServiceDesc, srv)
}

func _PortDb_PutPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDbServer).PutPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortDb/PutPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDbServer).PutPort(ctx, req.(*PortData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortDb_GetPorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortDbServer).GetPorts(m, &portDbGetPortsServer{stream})
}

type PortDb_GetPortsServer interface {
	Send(*PortData) error
	grpc.ServerStream
}

type portDbGetPortsServer struct {
	grpc.ServerStream
}

func (x *portDbGetPortsServer) Send(m *PortData) error {
	return x.ServerStream.SendMsg(m)
}

// PortDb_ServiceDesc is the grpc.ServiceDesc for PortDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortDb",
	HandlerType: (*PortDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutPort",
			Handler:    _PortDb_PutPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPorts",
			Handler:       _PortDb_GetPorts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
